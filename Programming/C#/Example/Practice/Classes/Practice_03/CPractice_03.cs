#define P03_01
#define P03_02
#define P03_03
#define P03_04
#define P03_05

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Practice.Classes.Practice_03 {
	internal class CPractice_03 {
#if P03_01

#elif P03_02

#elif P03_03

#elif P03_04

#elif P03_05

#endif // #if P03_01

		/** 초기화 */
		public static void Start(string[] args) {
#if P03_01
			/*
			 * 과제 3 - 1
			 * - 업/다운 게임 제작하기
			 * - 0 ~ 99 범위의 숫자 중 하나를 랜덤하게 생성 후 해당 숫자 맞추기
			 * 
			 * Ex)
			 * 정답 : 45
			 * 
			 * 숫자 입력 : 41
			 * 정답은 41 보다 높습니다.
			 * 
			 * 숫자 입력 : 58
			 * 정답은 58 보다 낮습니다.
			 * 
			 * 숫자 입력 : 45
			 * 정답니다.
			 */
#elif P03_02
			/*
			 * 과제 3 - 2
			 * - 바위/가위/보 게임 제작하기
			 * - 컴퓨터에게 이기면 게임을 계속 이어서 진행 (컴퓨터는 매 라운드마다 랜덤하게 선택)
			 * - 컴퓨터에게 졌을 경우 그 동안의 전적을 출력하고 게임 종료
			 * 
			 * Ex)
			 * 바위 (1), 가위 (2), 보 (3) 입력 : 1
			 * 결과 : 이겼습니다. (나 - 바위, 컴퓨터 - 가위)
			 * 
			 * 바위 (1), 가위 (2), 보 (3) 입력 : 2
			 * 결과 : 비겼습니다. (나 - 가위, 컴퓨터 - 가위)
			 * 
			 * 바위 (1), 가위 (2), 보 (3) 입력 : 3
			 * 결과 : 졌습니다. (나 - 보, 컴퓨터 - 가위)
			 * 
			 * 전적 : 1 승 1 무 1 패
			 * 게임을 종료합니다.
			 */
#elif P03_03
			/*
			 * 과제 3 - 3
			 * - 행맨 게임 제작하기
			 * - 랜덤하게 특정 단어를 선택 후 해당 단어 맞추기
			 * - 단, 알파벳 대/소문자는 구분하지 않는다.
			 * 
			 * Ex)
			 * 정답 : Apple
			 * 
			 * _ _ _ _ _
			 * 입력 : a
			 * 
			 * A _ _ _ _
			 * 입력 : e
			 * 
			 * A _ _ _ e
			 * 입력 : p
			 * 
			 * A p p _ e
			 * 입력 : l
			 * 
			 * A p p l e
			 * 게임을 종료합니다.
			 */
#elif P03_04
			/*
			 * 과제 3 - 4
			 * - 1,000 원을 동전으로 환전 할 때 환전 가능한 모든 경우의 수 출력하기
			 * - 환전 가능한 동전의 종류는 10 원, 50 원, 100 원, 500 원 이다.
			 * - 단, 최대 동전 개수는 각 동전마다 15 개로 제한
			 * 
			 * Ex)
			 * 총 20 가지
			 * - 10 원 (0 개), 50 원 (0 개), 100 원 (0 개), 500 원 (2 개)
			 * - 10 원 (0 개), 50 원 (0 개), 100 원 (5 개), 500 원 (1 개)
			 * 
			 * ... 이하 생략
			 */
#elif P03_05
			/*
			 * 과제 3 - 6
			 * - 미로를 탈출 할 수 있는 모든 경로를 탐색하는 함수 제작하기 (단, 탈출하기 위한 미로는 동적으로 생성하기 않고 
			 * 미리 제작)
			 * 
			 * Ex)
			 * =====> 탐색 전 <=====
			 * ####S####
			 * #       #
			 * ###   ###
			 * #   #   #
			 * ##      #
			 * ## # #  #
			 * ##E######
			 * 
			 * Case 1. 탐색에 성공했을 경우
			 * =====> 탐색 후 <=====
			 * 경로 1.
			 * ####S####
			 * #   *   #
			 * ###** ###
			 * #  *#   #
			 * ##**    #
			 * ##*# #  #
			 * ##E######
			 *
			 * 경로 2.
			 * ####S####
			 * #   *   #
			 * ### **###
			 * #   #*  #
			 * ##****  #
			 * ##*# #  #
			 * ##E######
			 * 
			 * Case 2. 탐색에 실패했을 경우
			 * =====> 탐색 후 <=====
			 * ####S####
			 * #       #
			 * ###   ###
			 * #   #   #
			 * ##      #
			 * ## # #  #
			 * ##E######
			 * 
			 * S (시작 위치) 부터 E (종료 위치) 까지 갈 수 있는 경로를 탐색 후 결과를 출력한다 (단, 탈출이 불가능 할 
			 * 경우에는 탐색 전과 동일한 미로를 출력)
			 * 
			 * 탈출 가능 한 경우 * 를 통해서 이동 경로를 표기한다
			 * 공백 일 경우 이동이 가능하며, # 기호는 이동이 불가능한 위치를 의미한다
			 */
#endif // #if P03_01
		}
	}
}
